<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
	System.Text.StringBuilder enumText = new System.Text.StringBuilder(); 
	String connectionString;
	String commandText;
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Runtime.Serialization;

namespace DistributorWebsite.MVC.WebUI
{
	<#
		enumText.Clear();
		enumText.AppendLine("\t\t/// <summary>");
		enumText.AppendLine("\t\t/// Unknown client");
		enumText.AppendLine("\t\t/// </summary>");
		enumText.AppendLine("\t\tUnknown = 0");
		enumText.AppendLine("");

		connectionString = @"Data Source=sql10-usdev\HCE,49483;Initial Catalog=DistributorWebsite;Integrated Security=True";  
		commandText = "SELECT Brand AS Item, BrandBit AS Bit, BrandDescription AS Description FROM Brands ORDER BY BrandBit"; 
             
		using(var connection = new SqlConnection(connectionString))         
		{ 
			connection.Open(); 
			using(var command = new SqlCommand(commandText, connection)) 
			using(var reader = command.ExecuteReader()) 
			{ 
				while (reader.Read()) 
				{ 
					enumText.AppendLine("\t\t/// <summary>");
					enumText.AppendLine("\t\t/// " + reader["Description"]);
					enumText.AppendLine("\t\t/// </summary>");
					enumText.AppendLine(String.Format("\t\t,{0} = {1}", reader["Item"], reader["Bit"]));
					enumText.AppendLine("");
				}     
			} 
		} 

	#>#region "ENUM: eBrand"
	/// <summary>
	/// Define the various product lines that distributors and salespeople can sell
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	[Flags]
	public enum eBrand
	{
	<#=enumText.ToString() #>	}
	#endregion

	<#
		enumText.Clear();
		enumText.AppendLine("\t\t/// <summary>");
		enumText.AppendLine("\t\t/// Unknown client");
		enumText.AppendLine("\t\t/// </summary>");
		enumText.AppendLine("\t\tUnknown = 0");
		enumText.AppendLine("");

		connectionString = @"Data Source=sql10-usdev\HCE,49483;Initial Catalog=DistributorWebsite;Integrated Security=True";  
		commandText = "SELECT Client AS Item, ClientBit AS Bit, ClientName AS Description FROM Clients ORDER BY ClientBit"; 
             
		using(var connection = new SqlConnection(connectionString))         
		{ 
			connection.Open(); 
			using(var command = new SqlCommand(commandText, connection)) 
			using(var reader = command.ExecuteReader()) 
			{ 
				while (reader.Read()) 
				{ 
					enumText.AppendLine("\t\t/// <summary>");
					enumText.AppendLine("\t\t/// " + reader["Description"]);
					enumText.AppendLine("\t\t/// </summary>");
					enumText.AppendLine(String.Format("\t\t,{0} = {1}", reader["Item"], reader["Bit"]));
					enumText.AppendLine("");
				}     
			} 
		} 

	#>#region "ENUM: eClient"
	/// <summary>
	/// Define the various clients that distributors and salespeople can sell in
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	[Flags]
	public enum eClient
	{
	<#=enumText.ToString() #>	}
	#endregion

	<#
		enumText.Clear();
		enumText.AppendLine("\t\t/// <summary>");
		enumText.AppendLine("\t\t/// Unknown client");
		enumText.AppendLine("\t\t/// </summary>");
		enumText.AppendLine("\t\tUnknown = 0");
		enumText.AppendLine("");

		connectionString = @"Data Source=sql10-usdev\HCE,49483;Initial Catalog=DistributorWebsite;Integrated Security=True";  
		commandText = "SELECT EntityAttribute AS Item, EntityAttributeBit AS Bit, EntityAttributeDescription AS Description FROM EntityAttributes ORDER BY EntityAttributeBit"; 
             
		using(var connection = new SqlConnection(connectionString))         
		{ 
			connection.Open(); 
			using(var command = new SqlCommand(commandText, connection)) 
			using(var reader = command.ExecuteReader()) 
			{ 
				while (reader.Read()) 
				{ 
					enumText.AppendLine("\t\t/// <summary>");
					enumText.AppendLine("\t\t/// " + reader["Description"]);
					enumText.AppendLine("\t\t/// </summary>");
					enumText.AppendLine(String.Format("\t\t,{0} = {1}", reader["Item"], reader["Bit"]));
					enumText.AppendLine("");
				}     
			} 
		} 

	#>#region "ENUM: eType"
	/// <summary>
	/// Define the various categories that distributors and salespeople can be clasified in
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	[Flags]
	public enum eType
	{
	<#=enumText.ToString() #>	}
	#endregion

	<#
		enumText.Clear();
		enumText.AppendLine("\t\t/// <summary>");
		enumText.AppendLine("\t\t/// Unknown client");
		enumText.AppendLine("\t\t/// </summary>");
		enumText.AppendLine("\t\tUnknown = 0");
		enumText.AppendLine("");

		connectionString = @"Data Source=sql10-usdev\HCE,49483;Initial Catalog=DistributorWebsite;Integrated Security=True";  
		commandText = "SELECT League AS Item, LeagueBit AS Bit, LeagueDescription AS Description FROM Leagues ORDER BY LeagueBit"; 
             
		using(var connection = new SqlConnection(connectionString))         
		{ 
			connection.Open(); 
			using(var command = new SqlCommand(commandText, connection)) 
			using(var reader = command.ExecuteReader()) 
			{ 
				while (reader.Read()) 
				{ 
					enumText.AppendLine("\t\t/// <summary>");
					enumText.AppendLine("\t\t/// " + reader["Description"]);
					enumText.AppendLine("\t\t/// </summary>");
					enumText.AppendLine(String.Format("\t\t,{0} = {1}", reader["Item"], reader["Bit"]));
					enumText.AppendLine("");
				}     
			} 
		} 

	#>#region "ENUM: eLeague"
	/// <summary>
	/// Define the various leagues that distributors and salespeople can sell in
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	[Flags]
	public enum eLeague
	{
	<#=enumText.ToString() #>	}
	#endregion
}
